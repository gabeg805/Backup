#!/bin/bash
# ------------------------------------------------------------------------------
# 
# File: backup
# Author: Gabriel Gonzalez
# 
# Brief: A file/directory/system backup program.
# 
# ------------------------------------------------------------------------------

##
# Project name.
##
PROJECT="${0##*/}"

##
# Options.
##
HELP=
BACKUP=()
DESTINATION=
EXCLUDE=()
FILE=()
SYSTEM=

##
# Files.
##
BACKUP_EXCLUDE_FILE="/tmp/${PROJECT}_exclude.txt"

##
# Exit statuses.
##
EXIT_BACKUP_INVALID_DIRECTORY=11
EXIT_BACKUP_INVALID_FILE=12
EXIT_BACKUP_INVALID_BACKUP_TYPE=13
EXIT_BACKUP_INVALID_FILE_TYPE=14
EXIT_BACKUP_USER_NOT_ROOT=20

##
# Backup.
##
main()
{
    # Parse options
    local short="hb:d:e:f:S"
    local long="help,backup:,destination:,exclude:,file:,system"
    local args=$(getopt -o "${short}" --long "${long}" --name "${PROJECT}" \
                        -- "${@}")
    if [ $? -ne 0 ]
    then
        usage
        exit 1
    fi
    eval set -- "${args}"

    while true
    do
        case "${1}" in
            -h|--help)
                usage
                return 0
                ;;
            -b|--backup)
                shift
                BACKUP+=("${1}")
                ;;
            -d|--destination)
                shift
                DESTINATION="${1}"
                ;;
            -e|--exclude)
                shift
                EXCLUDE+=("${1}")
                ;;
            -f|--file)
                shift
                FILE+=("${1}")
                ;;
            -S|--system)
                SYSTEM=true
                ;;
            *)
                break
                ;;
        esac
        shift
    done

    # Run options
    trap backup_cleanup EXIT
    if [ -n "${BACKUP}" ]
    then
        backup_directory "${DESTINATION}" "${BACKUP[@]}"
    elif [ -n "${FILE}" ]
    then
        backup_file "${FILE[@]}"
    elif [ -n "${SYSTEM}" ]
    then
        backup_system "${DESTINATION}"
    else
        :
    fi

    return $?
}

##
# Print program usage.
##
usage()
{
    echo "Usage: ${PROJECT} [options] [args]"
    echo 
    echo "Options:"
    echo "    -h, --help"
    echo "        Print program usage."
    echo 
    echo "    -b, --backup=<dir>"
    echo "        Backup a directory. Must be run with '-d' and, optionally,"
    echo "        with '-e'. Use this option more than once to backup more"
    echo "        directories."
    echo 
    echo "    -d, --destination=<dir>"
    echo "        Destination path to save backup to."
    echo 
    echo "    -e, --exclude=<dir>"
    echo "        A directory to exclude from the backup. Use this option more"
    echo "        than once to exclude more directories."
    echo 
    echo "    -f, --files=<file>"
    echo "        Backup a file by appending '.bak' to the name. Use this"
    echo "        option more than once to backup more files."
    echo 
    echo "    -S|--system"
    echo "        Full sytem backup. Must be run with '-d' and, optionally,"
    echo "        with '-e'."
    echo 
    echo "Arguments:"
    echo "    <dir>"
    echo "        A directory."
    echo 
    echo "    <file>"
    echo "        A file or directory."
}

##
# Backup one or more directories.
##
backup_directory()
{
    local dst="${1}"
    shift
    local src=("${@}")
    backup_directory_verify "${dst}" "${src[@]}" || return $?
    backup_rsync "backup" "${dst}" "${src[@]}"
    return $?
}

##
# Backup one or more files.
# 
# Append ".bak" to file backups.
##
backup_file()
{
    local f=
    for f in "${@}"
    do
        backup_file_verify "${f}" || return $?
        cp -anv "${f}" "${f}.bak"
    done
}

##
# Create a full system backup.
##
backup_system()
{
    local src=($(backup_system_get_source))
    local root=$(readlink -e "${1}")
    local dst=$(backup_system_get_destination "${root}")
    local logfile=$(backup_system_get_log "${dst}")
    backup_system_verify "${root}" "${src[@]}" || return $?
    backup_system_setup_exclude_defaults

    echo ":: Running Full System Backup."
    sleep 3
    mkdir -p "${dst}"

    local start=$(date +%s)
    backup_rsync "system" "${dst}" "${src[@]}" | tee -a "${logfile}"
    local stop=$(date +%s)
    backup_system_move_latest_snapshot "${root}" "${dst}" | tee -a "${logfile}"
    backup_system_print_time "${start}" "${stop}" | tee -a "${logfile}"
    backup_system_fix_log "${logfile}"
}

##
# Use rsync to backup.
##
backup_rsync()
{
    local type="${1}"
    local dst="${2}"
    shift 2
    local src=("${@}")
    local link=

    case "${type}" in
        backup)
            ;;
        system)
            link="--link-dest=$(dirname "${dst}")/latest"
            ;;
        *)
            echo "${PROJECT}: Unable to run rsync: Invalid backup type '${type}'." 1>&2
            return ${EXIT_BACKUP_INVALID_BACKUP_TYPE}
            ;;
    esac

    backup_rsync_setup_exclude_file
    rsync -aEHAXxPhv --exclude-from="${BACKUP_EXCLUDE_FILE}" \
          ${link} "${src[@]}" "${dst}"
    return $?
}

##
# Cleanup any created files, such as the exclude file.
##
backup_cleanup()
{
    rm -f "${BACKUP_EXCLUDE_FILE}"
}

##
# Verify that source and destination exist.
##
backup_directory_verify()
{
    local dst="${1}"
    shift
    local src=("${@}")
    local d=
    if  ! backup_is_destination "${dst}"
    then
        echo "${PROJECT}: Invalid backup destination '${dst}'." 1>&2
        return ${EXIT_BACKUP_INVALID_DIRECTORY}
    fi
    for d in "${src[@]}"
    do
        if ! backup_is_source "${d}"
        then
            echo "${PROJECT}: Invalid source directory/file '${d}'." 1>&2
            return ${EXIT_BACKUP_INVALID_DIRECTORY}
        fi
    done
    return 0
}

##
# Verify that file exists.
##
backup_file_verify()
{
    local file="${1}"
    if ! backup_is_file "${file}"
    then
        echo "${PROJECT}: Invalid file to backup '${file}'." 1>&2
        return ${EXIT_BACKUP_INVALID_FILE}
    fi
    return 0
}

##
# Verify that everything is prepared for full system backup.
##
backup_system_verify()
{
    local dst="${1}"
    shift
    local src=("${@}")
    if [ ${UID} -ne 0 ]
    then
        echo "${PROJECT}: Unable to run full system backup: Must be run as root." 1>&2
        return ${EXIT_BACKUP_USER_NOT_ROOT}
    fi
    backup_directory_verify "${dst}" "${src[@]}"
    return $?
}

##
# Setup the default exclude list.
##
backup_system_setup_exclude_defaults()
{
    local dirs=("/home/*/.thumbnails" \
                "/home/*/.cache" \
                "/home/*/.mozilla/firefox/*.default/storage" \
                "/root/.thumbnails" \
                "/root/.cache" \
                "/root/.mozilla/firefox/*.default/storage" \
                "/swapfile")
    local e=
    for e in "${dirs}"
    do
        EXCLUDE+=("${e}")
    done
}

##
# Setup the exclude file before running rsync.
##
backup_rsync_setup_exclude_file()
{
    local file="${BACKUP_EXCLUDE_FILE}"
    local i=
    : > "${file}"
    for i in "${EXCLUDE[@]}"
    do
        printf "%s\n" "${i}" >> "${file}"
    done
    return 0
}

##
# Print the amount of time it took to create a full system backup.
##
backup_system_print_time()
{
    local startsec="${1}"
    local stopsec="${2}"
    local startdate=$(date --date="@${startsec}")
    local stopdate=$(date --date="@${stopsec}")
    local duration=$[ ${stopsec} - ${startsec} ]
    local hr=$[ (${duration}/3600) % 24 ]
    local min=$[ (${duration}/60) % 60 ]
    local sec=$[ ${duration} % 60 ]
    local hrmsg=
    local minmsg=
    local secmsg="${sec} seconds"
    if [ ${hr} -ne 0 ]
    then
        hrmsg="${hr} hours, "
        minmsg="${min} minutes, "
    else
        if [ ${min} -ne 0 ]
        then
            minmsg="${min} minutes, "
        fi
    fi
    echo
    echo "--- Backup Results ---"
    printf "%-5s %s\n" "Start" ": ${startdate}"
    printf "%-5s %s\n" "End"   ": ${stopdate}"
    printf "%-5s %s\n" "Total" ": ${hrmsg}${minmsg}${secmsg}"
}

##
# Move the newly created snapshot to the latest symlink, for a full system
# backup.
##
backup_system_move_latest_snapshot()
{
    local root="${1}"
    local dst="${2}"
    echo ":: Moving latest snapshot to '${dst}'."
    rm -f "${root}/latest"
    ln -sv "${dst}" "${root}/latest"
}

##
# Fix the log file.
# 
# Due to having rsync show the progress of a copy, some lines wil have '\r' in
# them. Once the log file is generated, however, those '\r' status lines are no
# longer needed. This will remove those lines.
##
backup_system_fix_log()
{
    local log="${1}"
    echo ":: Doing some finishing touches."
    sed -i '/\r/d' "${log}"
    return $?
}

##
# Return the source directories for a full system backup.
##
backup_system_get_source()
{
    local IFS=$'\n'
    local line=
    local i=0
    for line in $(df -h -x tmpfs -x devtmpfs)
    do
        i=$[ ${i} + 1 ]
        if [ ${i} -eq 1 ]
        then
            continue
        fi
        local IFS=$' \t'
        local columns=(${line})
        local pt="${columns[5]}"
        case "${pt}" in
            *mnt*|*media*|*srv*) continue ;;
            *) echo "${pt}" ;;
        esac
    done
    return 0
}

##
# Return the destination directory for a full system backup.
##
backup_system_get_destination()
{
    local dir="${1}"
    echo "${dir}/$(date +%F)"
}

##
# Return the log for a full system backup.
##
backup_system_get_log()
{
    local dir="${1}"
    echo "${dir}/Backup_Summary_$(date +%T%z).log"
}

##
# Check if input source is a valid directory or file.
# 
# The directory must exist and the user must have read and execute permissions.
##
backup_is_source()
{
    local src="${1}"
    if [ -d "${src}" -a -r "${src}" -a -x "${src}" ] || [ -f "${src}" -a -r "${src}" ]
    then
        return 0
    else
        return 1
    fi
}

##
# Check if input destination is a valid directory.
# 
# The directory must exist and the user must have read, write, and execute
# permissions.
##
backup_is_destination()
{
    local dst="${1}"
    if [ -d "${dst}" -a -r "${dst}" -a -w "${dst}" -a -x "${dst}" ]
    then
        return 0
    else
        return 1
    fi
}

##
# Check ig input is a file.
# 
# The file must exist and the user must have read permissions.
##
backup_is_file()
{
    local IFS=$'|'
    for file in ${@}
    do
        if [ ! -f "${file}" -o ! -r "${file}" ]
        then
            return 1
        fi
    done
    return 0
}

##
# Run script.
##
main "${@}"
