#!/bin/bash
## 
## CONTRIBUTORS: 
## 
##     * Gabriel Gonzalez (gabeg@bu.edu) 
## 
## 
## LICENSE: 
## 
##     The MIT License (MIT)
## 
## 
## NAME:
## 	
##     back - File/directory/system backup.
## 
## 
## SYNTAX: 
## 	
##     back [-h|--help] [--full] [[-f|--files] <files>] [[-b|--backup] <src> <dst>]
## 
## 
## PURPOSE:
## 	
##     A backup program that is capable of backing up files, directories, or the
##     entire system.
## 
## 
## OPTIONS:
## 	
##     -h, --help
##         Print program usage.
## 
##     --full
##         Full system backup.
## 
##     -f, --files <files>
##         Back up the specified files.
## 
##     -b, --backup <src> <dst>
##         Backup files from the given source to the specified destination directory.
## 
## 
## FUNCTIONS:
## 	
##     print_usage       - Print program usage.
##     print_backup_done - Print backup done message.
## 
##     root_check        - Check if user has root priveleges.
##     path_check        - Prompts the user to make sure the given source and 
##                         destination directories are correct.
## 
##     init_backup_paths - Initialize the backup source and destination paths.
##     init_time         - Initialize the program start and end run times.
##     init_full_backup  - Initialize the full system backup.
## 
##     get_exclude_dir   - Get directories to exclude.
##     get_path          - Determine the full source and destination path.
##     rsync_exclude     - Prompt the user for files/directories to exclude, and add 
##                         them to the global exclude variable.
##     rsync_options     - Define the parameter options for the rsync command.
## 
##     file_backup       - Back up an individual file, or multiple files.
##     rsync_backup      - Backup the specified source item to the destination 
##                         directory.
## 
## 
## FILE STRUCTURE:
##
##     * Print Program Usage
##     * Program Status Check
##     * Process Initializations
##     * Absolute Paths and Exclude Paths
##     * Create Backups
##     * Backup Files and Directories
##   
##   
## MODIFICATION HISTORY:
## 	
##     gabeg Mar 31 2014 <> Created.
## 
##     gabeg Jun 30 2014 <> Combined the script that backs up files and the 
##                          school directory, with the script that backs up the 
##                          entire system.
##     
##     gabeg Aug 08 2014 <> Changed function and variable layout to be tighter.
##
##     gabeg Dec 31 2014 <> Removed "step_separator", "is_destination", and 
##                          "is_path". Added "-b" option to specify that a backup 
##                          with a source and destination directory was being 
##                          executed. Changed "print_usage" to reflect this addition.
##                          Made the program more verbose so that the user knows what
##                          is going on. Updated "path_check" to better check if an
##                          absolute path was specified.
## 
##     gabeg Apr 05 2015 <> Removed the dropbox school backup.
##                          
##                          Included more global variables to make the rsync command 
##                          parameter options cleaner and easier to define.
##                          
##                          Cleaned up the code and updated the backup process by 
##                          utlizing the global variables.
## 
## 
## NOTICE: 
## 
##     I did not write the Dropbox program, thus I cannot take credit for writing any
##     of that code. The Dropbox program might not use The MIT License (MIT), thus 
##     this license  only applies to the lines of code that do not contain the  
##     "dropbox" command.
##
## **********************************************************************************



## ================
## GLOBAL VARIABLES
## ================

## Program information
ARGV=("$@")
PROG_NAME=`basename $0`

## Times
START_TIME=0
END_TIME=0

## Dates
START_DATE=""
END_DATE=""

## Paths
SRC_PATH=""
DST_PATH=""

## Log files
BACKUP_LOG=""

## Default rsync options
EXCLUDE=()
OPTIONS=(--delete -aAXvh --progress)



## ###############################
## ##### PRINT PROGRAM USAGE #####
## ###############################

## Displays the help screen
function print_usage {
    echo "Usage: ${PROG_NAME} back [-h|--help] [--full] [[-f|--files] <files>] [[-b|--backup] <src> <dst>]"
    exit 1
}



## Print backup done message
function print_backup_done {
    
    ## Append message to log file
    min=$[ (${END_TIME} - ${START_TIME}) / 60 ]
    sec=$[ (${END_TIME} - ${START_TIME}) % 60 ]
    
    printf "\n%s\n%s\n%s\n%-10s %s\n%-10s %s\n%-10s %s %s\n" \
           "==============" \
           "Backup Results" \
           "==============" \
           "Start:" "${START_DATE}" \
           "End:" "${END_DATE}" \
           "Total:" "${min} minutes," "${sec} seconds" 
}



## ################################
## ##### PROGRAM STATUS CHECK #####
## ################################

## Check if full system backup is set and user is root
function root_check {
    echo ":: Checking root priveleges..."
    
    if [ ${UID} -ne 0 ]; then
        echo "${PROG_NAME}: Must be root to run full system backup."
        exit 1
    fi
}



## Check if file paths are valid
function path_check {
    
    ## Verify paths
    if [ -e "${SRC_PATH}" ] && [ -e "${DST_PATH}" ]; then
        printf "\n%s\n\t%-12s %s\n\t%s %s\n\n%s\n" \
               "Using the following directories:" \
               "Source:"  "'${SRC_PATH}'" \
               "Destination:" "'${DST_PATH}'" \
               "Continue?"
        
        local ans
        read -p "> " ans
        
        ## Check answer
        case "${ans}" in 
            ""|y|Y) ;;
            *) 
                echo ":: Exiting..."
                exit 0
                ;;
        esac
    else
        echo -e "${PROG_NAME}: Incorrect file paths given." \
              "\n\tSource:      '${SRC_PATH}'" \
              "\n\tDestination: '${DST_PATH}'"
        exit 1
    fi
}



## ###################################
## ##### PROCESS INITIALIZATIONS #####
## ###################################

## Initialize the backup source and destination paths
function init_backup_paths {
    
    ## Full path of location to copy and save to 
    echo ":: Determining backup source and destination directories..."
    SRC_PATH=`get_path "--src"`
    DST_PATH=`get_path "--dst"`
    
    ## Prompt user if src and dst paths are correct
    path_check
}



## Initialize the program start and end run times
function init_time {
    case "$1" in
        "--start")
            ## Define time of start
            START_TIME=`date +%s`
            START_DATE=`date --date="@${START_TIME}"`
            
            ## Define log file containing a summary of the backup duration
            log_str=`echo "${START_DATE}" | tr ' ' '-'`
            BACKUP_LOG="${DST_PATH}/Backup_${log_str}.log"
            ;;
        
        "--end")
            ## Define time of completion
            END_TIME=`date +%s`
            END_DATE=`date --date="@${END_TIME}"`
            ;;
    esac
}



## Initialize full system backup 
function init_full_backup {
    echo ":: Beginning Full System Backup..."
    root_check
}



## ############################################
## ##### ABSOLUTE PATHS AND EXCLUDE PATHS #####
## ############################################

## Get directories to exclude
function get_exclude_dir {
    
    ## Change array delimeter
    local IFS=$'\n'
    
    ## Prompt user
    local ans
    read -p "> " ans
    
    ## User response for not excluding directories
    case "${ans}" in
        ""|n|N) return ;;
    esac
    
    ## Get the directories to exclude
    temp=(`echo "${ans}" | sed 's/\,/\n/g'`)
    for dir in "${temp[@]}"; do
        echo "${dir}"
    done
}



## Determines the full location path
function get_path {
    
    ## Location to backup
    case "$1" in
        "--src")
            loc="${ARGV[1]}"
            
            ## Full system backup will backup root directory
            if [[ "${ARGV[0]}" == "--full" ]]; then echo "/"; return; fi
            ;;
        
        "--dst")
            loc="${ARGV[2]}"
            ;;
    esac
    
    ## Create full system backup directory if necessary
    case "${ARGV[0]}" in
        "--full")
            
            ## Determine path of directory to save full system backup
            now=`date +"%m.%d.%y--%H:%M:%S"`
            dir="Full-System-Backup--${now}"
            
            if [ -e "${loc}" ]; then
                loc="${loc}/${dir}"
            else
                loc="$(pwd)/${dir}"
            fi
            
            ## Create the directory in which to save the full system backup
            mkdir "${loc}"
            ;;
    esac
    
    ## Absolute path given
    if [[ "${loc:0:1}" == "/" ]] && [ -e "${loc}" ]; then
        echo "${loc}"
    else
        
        ## Construct absolute path
        loc="$(pwd)/${loc}"
        
        if [ -e "${loc}" ]; then
            echo "${loc}"
        else
            echo "Unknown"
        fi
    fi
}



## Define files/directories to exclude
function rsync_exclude {
    
    ## Prompt user for directories to exclude
    echo -e "Which directories would you like to exclude?" \
         "\nExample: '/proc/sys,/dev/block,/boot/grub'" \
         "\nHit [enter] to skip."
    
    ## Get excluded directories
    case "${ans}" in
        "") ;;
        *)
            EXCLUDE=(`get_exclude_dir`)
            ;;
    esac
    
    ## Default excluded directories for FULL SYSTEM BACKUP
    case "${ARGV[0]}" in
        "--full")
            EXCLUDE+=(
                /dev
                /proc
                /sys
                /tmp
                /run
                /lost+found
                /var/lib/pacman/sync
                /home/*/.thumbnails
                /home/gabeg/.mozilla/firefox/*.default/Cache
                /home/gabeg/.cache/mozilla
                /usr/local/exelis
                /media
                /swapfile
            )
            ;;
    esac
}



## Define rsync options
function rsync_options {
    
    ## Append exclusions to rsync options
    for dir in "${EXCLUDE[@]}"; do 
        if [ -e "${dir}" ]; then
            OPTIONS+=("--exclude=${dir}/*")
        else
            echo ":: Cannot exclude '${dir}', not a directory."
        fi
    done
}



## ##########################
## ##### CREATE BACKUPS ##### 
## ##########################

## Make backup files ( append '.bak' to file(s) )
function file_backup {
    for file in "$@"; do        
        cp -nrv "${file}" "${file}.bak"
        if [ $? -eq 1 ]; then exit $?; fi
    done
    
    exit 0
}



## Backup source item to destination directory
function rsync_backup {
    echo -e "\n:: Backing up files..."
    
    rsync_exclude
    rsync_options
    rsync "${OPTIONS[@]}" "${SRC_PATH}" "${DST_PATH}"
}



## ####################################
## ##### BACKUP FILES/DIRECTORIES #####
## ####################################

## Execute the chosen backup based on user input
function main {
    
    ## Check user options
    case "${ARGV[0]}" in
        
        ## Print the help screen
        "-h"|"--help") 
            print_usage
            ;;
        
        ## Full system backup
        "--full")
            init_full_backup
            ;;
        
        ## Back Up Specified File(s)
        "-f"|"--files") 
            n=$[ ${#ARGV[@]} - 1 ]
            file_backup "${ARGV[@]:1:${n}}"
            ;;
        
        ## Regular directory backup
        "-b"|"--backup")
            ;;
        
        ## Print the help screen
        *) 
            print_usage
            ;;
    esac
    
    ## Initialize source and destination paths
    init_backup_paths 

    
    ## Backup source to destination
    init_time "--start"
    rsync_backup "${ARGV[0]}" | tee -a "${BACKUP_LOG}"
    init_time "--end"
    
    ## Fix backup log (rsync prints carriage returns ('\r')
    sed -i 's/\r/\n/g' "${BACKUP_LOG}" 
    sed -i '/^$/d' "${BACKUP_LOG}" 
    
    ## Print done message
    print_backup_done | tee -a "${BACKUP_LOG}"
}



## Begin backup 
main 
