#!/bin/bash
# ------------------------------------------------------------------------------
# 
# File: back
# Author: Gabriel Gonzalez
# 
# Brief: A file/directory/system backup program.
# 
# ------------------------------------------------------------------------------

##
# Source utilities.
##
. "commandline.sh"
. "io.sh"

##
# Exit statuses.
##
STATUS_NORMAL=0
STATUS_GETOPT=1
STATUS_ARGS=2
STATUS_SRCDIR=10
STATUS_DSTDIR=11
STATUS_ROOT=100

##
# Backup.
##
main()
{
    cli_options "-h|--help             |Print program usage." \
                "-b|--backup=src:::    |Backup one or more directories. Must be run with '-d' and, optionally, with '-e'." \
                "-d|--destination=dest:|Destination path to save backup to." \
                "-e|--exclude=dir:::   |Directories to exclude from the backup." \
                "-f|--files=files:::   |Backup one or more files. Appends '.bak' to the name." \
                "-F|--full-backup      |Full backup of entire system. Must be run with '-d' and, optionally, with '-e'." \
                "-v|--verbose          |Print verbose output."
    cli_parse "${@}"

    local backup=
    local destination=
    local exclude=
    local files=
    local fullbackup=

    if [ -n "${backup}" ]
    then
        back_directory_backup "${backup}" "${destination}" "${exclude}"
    elif [ -n "${files}" ]
    then
        back_file_backup "${files}"
    elif [ -n "${fullbackup}" ]
    then
        back_full_backup "${destination}" "${exclude}"
    else
        :
    fi
    exit $?
}

##
# Backup one or more directories.
##
back_directory_backup()
{
    local src="${1}"
    local dst="${2}"
    local exclude="${3}"

    # Backup
    local start=$(date +%s)
    rsync_backup "${src}" "${dst}" "${exclude}"
    local stop=$(date +%s)
    print_backup_done "${start}" "${stop}"
}

# ******************************************************************************
# Make backup files ( append '.bak' to file(s) )
back_file_backup()
{
    for f in "${@}"; do
        # Ignore. From getopts indicating end of arguments
        if [ "${f}" == "--" ]; then
            continue
        fi

        # Backup file
        cp -anv "${f}" "${f}.bak"
        if [ $? -ne 0 ]; then 
            print_warn "Skipping '${f}'"
            continue
        fi
    done
}

# ******************************************************************************
# Full system backup 
back_full_backup()
{
    local src="/"
    local dst="${1}"
    local exclude="${2}"

    # Check root
    if [ ${UID} -ne 0 ]; then
        print_err "Unable to run full backup: Must be run by root."
        exit ${STATUS_ROOT}
    fi

    # Append default directories to exclude list
    local defaultdir=(
        /dev
        /lost+found
        /media
        /mnt
        /proc
        /swapfile
        /sys
        /tmp
        /home/*/.thumbnails
        /home/gabeg/.mozilla/firefox/*.default/Cache
        /home/gabeg/.cache
        /home/gabeg/.local
    )
    for d in "${defaultdir[@]}"; do
        exclude="${exclude},${d}"
    done

    # Create backup
    print_info "Beginning Full System Backup..."
    local log="${dst}/Backup_Summary_$(date +%FT%T%z).log"


    back_directory_backup "${src}" "${dst}" "${exclude}" | tee -a "${log}"
    sed -i 's/\r/\n/g' "${log}" 
}

# ******************************************************************************
# Use rsync to backup
rsync_backup()
{
    local src="${1}"
    local dst="${2}"
    local exclude="${3}"
    local srcdirs=

    # Check existence of source and destination locations
    srcdirs=($(get_source_directories "${src}"))
    if [ $? -ne 0 ]; then
        exit ${STATUS_SRCDIR}
    fi
    if [ ! -e "${dst}" ]; then
        print_err "Unable to create backup: Destination does not exist."
        exit ${STATUS_DSTDIR}
    fi

    # Backup
    print_info "Backing up files..."
    local options=($(get_rsync_options))
    rsync "${options[@]}" "${srcdirs[@]}" "${dst}"
}

# ******************************************************************************
# Return rsync options
get_rsync_options()
{
    local exclude="${1}"
    local options=(--delete -aAXvh --progress)
    local IFS=$','
    for d in $(echo "${exclude}"); do
        if [ -d "${d}" ]; then
            options+=("--exclude=${d}/*")
        else
            print_warn "Unable to exclude '${dir}'."
        fi
    done
    echo "${options[@]}"
}

# ******************************************************************************
# Return source directories
get_source_directories()
{
    local srcdirs=()
    local IFS=$','
    for f in $(echo "${src}"); do
        if [ ! -e "${f}" ]; then
            print_err "Unable to create backup: Source does not exist."
            return ${STATUS_SRCDIR}
        fi
        srcdirs+=("${f}")
    done
    echo "${srcdirs[@]}"
}

# ******************************************************************************
# Print backup done message
print_backup_done()
{
    local startsec="${1}"
    local stopsec="${2}"
    local startdate=$(date --date="@${startsec}")
    local stopdate=$(date --date="@${stopsec}")
    local min=$[ (${stopsec} - ${startsec}) / 60 ]
    local sec=$[ (${stopsec} - ${startsec}) % 60 ]

    echo
    echo "--- Backup Results ---"
    printf "%-5s %s\n" "Start" ": ${startdate}"
    printf "%-5s %s\n" "End"   ": ${stopdate}"
    printf "%-5s %s\n" "Total" ": ${min} minutes, ${sec} seconds" 
}

# ******************************************************************************
# Run script
main "${@}"
