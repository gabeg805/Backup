#!/bin/bash
# ******************************************************************************
# 
# Name:    back
# Author:  Gabriel Gonzalez
# Email:   gabeg@bu.edu
# License: The MIT License (MIT)
# 
# Syntax: back [options] [args]
# 
# Description: A file/directory/system backup program.
# 
# Notes: None.
# 
# ******************************************************************************

# Globals
PROG="${0##*/}"

# Options
VERBOSE=

# Source utility
. ../lib/util.sh

# Exit statuses
STATUS_NORMAL=0
STATUS_GETOPT=1
STATUS_ARGS=2
STATUS_SRCDIR=10
STATUS_DSTDIR=11
STATUS_ROOT=100

# ******************************************************************************
# Main
main()
{
    [ $# -eq 0 ] && usage && exit ${STATUS_NORMAL}

    short="hvf:b:d:e:"
    long="help,verbose,files:,backup:,full-backup:,destination:,rsync-exclude:"
    args=$(getopt -o "${short}" --long "${long}" --name "${PROG}" -- "${@}")

    [ $? -ne 0 ] && usage && exit ${STATUS_GETOPT}
    eval set -- "${args}"

    # Options
    local FILES=
    local BACKUP=
    local FULLBACKUP=
    local SOURCE=
    local DESTINATION=
    local EXCLUDE=

    # Parse options
    while true; do
        case "${1}" in
            # Print usage
            -h|--help)
                usage
                exit 0
                ;;

            # Verbose
            -v|--verbose)
                VERBOSE=true
                ;;

            # Backup files
            -f|--files)
                shift
                if [ -n "${BACKUP}" -o -n "${FULLBACKUP}" ]; then
                    print_err "Unable to backup files: Multiple options specified."
                    exit ${STATUS_ARGS}
                fi
                FILES=("${@}")
                ;;

            # Backup directory(ies)
            -b|--backup)
                shift
                if [ -n "${FILES}" -o -n "${FULLBACKUP}" ]; then
                    print_err "Unable to backup files: Multiple options specified."
                    exit ${STATUS_ARGS}
                fi
                BACKUP=true
                SOURCE="${1}"
                ;;

            # Full backup
            --full-backup)
                shift
                if [ -n "${FILES}" -o -n "${BACKUP}" ]; then
                    print_err "Unable to backup files: Multiple options specified."
                    exit ${STATUS_ARGS}
                fi
                FULLBACKUP=true
                DESTINATION="${1}"
                ;;

            # Destination location
            -d|--destination)
                shift
                DESTINATION="${1}"
                ;;

            # Exclude directories for rsync
            -e|--rsync-exclude)
                shift
                EXCLUDE="${1}"
                ;;

            # End of options
            --) 
                break
                ;;
        esac
        shift
    done

    # Run options
    if [ -n "${FILES}" ]; then
        run_file_backup "${FILES[@]}"
    elif [ -n "${BACKUP}" ]; then
        run_backup "${SOURCE}" "${DESTINATION}" "${EXCLUDE}"
    elif [ -n "${FULLBACKUP}" ]; then
        run_full_backup "${DESTINATION}" "${EXCLUDE}"
    else
        :
    fi
}

# ******************************************************************************
# Print program usage
usage()
{
    echo "Usage ${PROG} [options] <args>"
    echo 
    echo "Options:"
    echo "    -h, --help"
    echo "        Print program usage."
    echo
    echo "    -v, --verbose"
    echo "        Print verbosely."
    echo
    echo "    -f, --files <files>"
    echo "        Backup one or more files by appending '.bak' to the name."
    echo
    echo "    -b, --backup <src>"
    echo "        Backup a directory."
    echo
    echo "    --full-backup <dst>"
    echo "        Full backup of entire system."
    echo 
    echo "    -d, --destination <dst>"
    echo "        Destination directory to save backup to."
    echo
    echo "    -e, --rsync-exclude <exclude>"
    echo "        Directories to exclude when running backup."
    echo
    echo "Arguments:"
    echo "    <files>"
    echo "        One or more files to backup."
    echo
    echo "    <src>"
    echo "        Comma separated list of one or more source directories."
    echo
    echo "    <dst>"
    echo "        Destination directory to save backup to."
    echo
    echo "    <exclude>"
    echo "        Comma separated list of directories to exclude from backup."
}

# ******************************************************************************
# Make backup files ( append '.bak' to file(s) )
run_file_backup()
{
    for f in "${@}"; do
        # Ignore. From getopts indicating end of arguments
        if [ "${f}" == "--" ]; then
            continue
        fi

        # Backup file
        cp -anv "${f}" "${f}.bak"
        if [ $? -ne 0 ]; then 
            print_warn "Skipping '${f}'"
            continue
        fi
    done
}

# ******************************************************************************
# Run backup
run_backup()
{
    local src="${1}"
    local dst="${2}"
    local exclude="${3}"

    # Backup
    local start=$(date +%s)
    rsync_backup "${src}" "${dst}" "${exclude}"
    local stop=$(date +%s)
    print_backup_done "${start}" "${stop}"
}

# ******************************************************************************
# Full system backup 
full_backup()
{
    local src="/"
    local dst="${1}"
    local exclude="${2}"

    # Check root
    if [ ${UID} -ne 0 ]; then
        print_err "Unable to run full backup: Must be run by root."
        exit ${STATUS_ROOT}
    fi

    # Append default directories to exclude list
    local defaultdir=(
        /dev
        /lost+found
        /media
        /mnt
        /proc
        /swapfile
        /sys
        /tmp
        /home/*/.thumbnails
        /home/gabeg/.mozilla/firefox/*.default/Cache
        /home/gabeg/.cache
        /home/gabeg/.local
    )
    for d in "${defaultdir[@]}"; do
        exclude="${exclude},${d}"
    done

    # Create backup
    print_info "Beginning Full System Backup..."
    local log="${dst}/Backup_Summary_$(date +%FT%T%z).log"


    run_backup "${src}" "${dst}" "${exclude}" | tee -a "${log}"
    sed -i 's/\r/\n/g' "${log}" 
}

# ******************************************************************************
# Use rsync to backup
rsync_backup()
{
    local src="${1}"
    local dst="${2}"
    local exclude="${3}"
    local srcdirs=

    # Check existence of source and destination locations
    srcdirs=($(get_source_directories "${src}"))
    if [ $? -ne 0 ]; then
        exit ${STATUS_SRCDIR}
    fi
    if [ ! -e "${dst}" ]; then
        print_err "Unable to create backup: Destination does not exist."
        exit ${STATUS_DSTDIR}
    fi

    # Backup
    print_info "Backing up files..."
    local options=($(get_rsync_options))
    rsync "${options[@]}" "${srcdirs[@]}" "${dst}"
}

# ******************************************************************************
# Return rsync options
get_rsync_options()
{
    local exclude="${1}"
    local options=(--delete -aAXvh --progress)
    local IFS=$','
    for d in $(echo "${exclude}"); do
        if [ -d "${d}" ]; then
            options+=("--exclude=${d}/*")
        else
            print_warn "Unable to exclude '${dir}'."
        fi
    done
    echo "${options[@]}"
}

# ******************************************************************************
# Return source directories
get_source_directories()
{
    local srcdirs=()
    local IFS=$','
    for f in $(echo "${src}"); do
        if [ ! -e "${f}" ]; then
            print_err "Unable to create backup: Source does not exist."
            return ${STATUS_SRCDIR}
        fi
        srcdirs+=("${f}")
    done
    echo "${srcdirs[@]}"
}

# ******************************************************************************
# Print backup done message
print_backup_done()
{
    local startsec="${1}"
    local stopsec="${2}"
    local startdate=$(date --date="@${startsec}")
    local stopdate=$(date --date="@${stopsec}")
    local min=$[ (${stopsec} - ${startsec}) / 60 ]
    local sec=$[ (${stopsec} - ${startsec}) % 60 ]

    echo
    echo "--- Backup Results ---"
    printf "%-5s %s\n" "Start" ": ${startdate}"
    printf "%-5s %s\n" "End"   ": ${stopdate}"
    printf "%-5s %s\n" "Total" ": ${min} minutes, ${sec} seconds" 
}

# ******************************************************************************
# Run script
main "${@}"
